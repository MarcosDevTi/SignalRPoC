@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var group = (string)ViewData["Group"];
    var title = (string)ViewData["Title"];
}
<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="m-0">@title</h2>
    <div class="btn-group">
        <button id="btnConnect" class="btn btn-success btn-sm">Connect</button>
        <button id="btnDisconnect" class="btn btn-outline-danger btn-sm">Disconnect</button>
        <button id="btnJoin" class="btn btn-primary btn-sm">Join Group</button>
        <button id="btnLeave" class="btn btn-outline-secondary btn-sm">Leave Group</button>
    </div>
</div>
<div class="card shadow-sm">
    <div class="card-body">
        <p class="text-muted">Current stop: <span id="stop">0</span> / <span id="total">0</span></p>
        <div class="progress mb-2" role="progressbar" aria-valuemin="0" aria-valuemax="100">
            <div id="progressBar" class="progress-bar" style="width:0%">0%</div>
        </div>
    </div>
</div>
<script>
    const groupName = '@group';
    let connection = null;

    function buildConnection() {
        connection = new signalR.HubConnectionBuilder().withUrl('/bushub').build();
        connection.on('BusProgress', (msg) => {
            if (msg.group === groupName) {
                console.log('BusProgress update:', msg);
                document.getElementById('stop').textContent = msg.stopNumber;
                document.getElementById('total').textContent = msg.totalStops;
                document.getElementById('progressBar').style.width = msg.progressPercent + '%';
                document.getElementById('progressBar').textContent = Math.round(msg.progressPercent) + '%';
            }
        });
        connection.on('ForceDisconnect', () => {
            console.log('ForceDisconnect received');
            connection.stop();
        });
    }

    async function connect() {
        if (!connection) buildConnection();
        if (connection.state === 'Connected') return;
        await connection.start();
        console.log('Connected');
    }

    async function disconnect() {
        if (connection && connection.state !== 'Disconnected') {
            await connection.stop();
            console.log('Disconnected');
        }
    }

    document.getElementById('btnConnect').addEventListener('click', async () => { await connect(); });
    document.getElementById('btnDisconnect').addEventListener('click', async () => { await disconnect(); });
    document.getElementById('btnJoin').addEventListener('click', async () => {
        await connect();
        await connection.invoke('JoinGroup', groupName);
        console.log('Joined', groupName);
    });
    document.getElementById('btnLeave').addEventListener('click', async () => {
        if (connection && connection.state === 'Connected') {
            await connection.invoke('LeaveGroup', groupName);
            console.log('Left', groupName);
        }
    });

    (async () => {
        await connect();
        await connection.invoke('JoinGroup', groupName);
    })();
</script>
